05/02/11: Here is a local copy of /kortemmelab/home/oconchus/rocco/ensemble_design

Here is the email Shane send me:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Hi,

Here's an example of the types of output Tanja mentioned so you can read the code below in context:
https://kortemmelab.ucsf.edu/backrub/cgi-bin/rosettaweb.py?query=jobinfo&jobnumber=4360a29b4cbef9bbfaabcce1924d356d

You should be able to get the scripts at:
/kortemmelab/home/oconchus/rocco/ensemble_design where kortemmelab is the mounted name for ganon

The main code I think you'll need is in ensemble_design.py. However, you will probably only need the excerpts below so I'd paste that into a new file. 
You'll need a starting PDB file and another file containing a list of gzipped PDBs ("ensemble.lst" below). An example ensemble.lst file generated by Greg's scripts is:

backrubs/br0001last_0001.pdb.gz
backrubs/br0001last_0002.pdb.gz

Let me know if you need anything else or would like me to call over to you.

Regards,
Shane

# The "Mean Cα difference distance values" pdb is generated with the following:

   import sys
   from optparse import OptionParser
   import os.path, numpy
   import util, pool, PDBlite

   CA_DIST_DIFF_MATRIX_FILE = "ca_dist_difference_matrix.dat"
   CA_DIST_DIFF_BFACT_PDB_FILE = "ca_dist_difference_bfactors.pdb"
   starting_pdb = PDBlite.PDB(open(starting_pdb_file).readlines())
   <ensemble.lst = a file which is a list of PDBs>
   br_traj = PDBlite.PDBTrajectory("ensemble.lst")
   open(CA_DIST_DIFF_MATRIX_FILE, "w").write(br_traj.get_diff_dist_matrix_str())

   # calculate the RMSDs at each residue
   rmsds = br_traj.calc_rmsd_over_sequence(starting_pdb, ["CA"])

   # load the CA distance difference results
   A = numpy.loadtxt(CA_DIST_DIFF_MATRIX_FILE)
   vals_str = util.run("grep MEAN %(CA_DIST_DIFF_MATRIX_FILE)s | tr ' ' '\t' | cut -f4-" % vars()).replace("\t",",")
   ca_dist_diff_means = numpy.array(map(float, vals_str.split(",")))

   # add CA-distance difference values into bfactor of a new pdb file
   open(CA_DIST_DIFF_BFACT_PDB_FILE, 'w').write(starting_pdb.get_pdb_set_bfactor_str(list(ca_dist_diff_means)))

# The "Pairwise Cα difference distance values" graph is generated with the following:
# (The variable A is created above)

   res_nums = [int(res.res_num) for res in starting_pdb.iter_residues()]
   nres = len(res_nums)
   res_num_strs = map(str, res_nums)

   import matplotlib
   matplotlib.use('Agg') # so plots aren't made interactively
   import pylab
   matplotlib.rcParams['xtick.direction'] = 'out'
   matplotlib.rcParams['ytick.direction'] = 'out'

   # now plot 2D
   pylab.figure()
   ax = pylab.subplot(111)
   plot2D = pylab.imshow(A, cmap=pylab.cm.hot, origin='lower')
   pylab.xticks(numpy.arange(nres), res_num_strs) # add ticks for all residues
   pylab.yticks(numpy.arange(nres), res_num_strs) # add ticks for all residues

   pylab.xlabel('Residue')
   pylab.ylabel('Residue')
   cb = pylab.colorbar(plot2D)
   cb.set_label('C-alpha distance difference value')
   xlabels, ylabels = ax.get_xticklabels(), ax.get_yticklabels()
   pylab.setp(xlabels, rotation=-90, fontsize=5)
   pylab.setp(ylabels, fontsize=5)
   pylab.savefig(CA_DIST_DIFF_2D_PLOT_FILE, dpi=300)

# The "Mean Cα difference distance values" graph is generated with the following:

   # plot 1D
   pylab.figure()
   ax = pylab.subplot(111)
   plot1D = pylab.plot(ca_dist_diff_means)
   pylab.xticks(numpy.arange(nres), res_num_strs) # add ticks for all residues
   pylab.xlabel('Residue')
   pylab.ylabel('C-alpha distance difference mean value')
   xlabels = ax.get_xticklabels()
   pylab.setp(xlabels, rotation=-90, fontsize=5)
   pylab.savefig(CA_DIST_DIFF_1D_PLOT_FILE, dpi=300)

# The "Mean RMSD of Cα atoms for individual residues" graph is generated with the following:

   # plot rmsds
   pylab.figure()
   ax = pylab.subplot(111)
   plot = pylab.plot(rmsds)
   pylab.xticks(numpy.arange(nres), res_num_strs) # add ticks for all residues
   pylab.xlabel('Residue')
   pylab.ylabel('RMSD (Angstroms)')
   xlabels = ax.get_xticklabels()
   pylab.setp(xlabels, rotation=-90, fontsize=5)
   pylab.savefig(RMSD_PLOT_FILE, dpi=300)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


05/19/11:
- The orginal makeraphs.py script that Shane gave me takes 1) a single pdb
  file and 2) a file containing a list of other structs, and calculates the
  averaged C-alpha difference distance matrix between the one structure and
  the ensemble.
- What I need is very similar, but I need to be able to supply more than one
  structure in the first parameter so that we calculate an all-by-all between
  the two ensembles.

05/20/11:
- For now I'm including ALL the experimental and backrub structures into one single list and I'm going to run Greg's script as is. This will
  calculate the average difference distances of Ca-Ca among all the experimental and backrub structs, which includes comparing variability
  of structures within the same set as well. This may not be the ideal way of doing this but I'm doing it for now so I can report something
  the group ASAP and raise the question about inter-set comparison rather than intra-set comparisons.

  ls ../ExperimentalStructs/ | grep pdb > Exp-1A8G-ensemble.lst 
  ls /media/RoccoBackup/kortemme/WinterRotation2009/consensus_min_orig_min/1A8G_ensemble | egrep "last|low" >> Exp-1A8G-ensemble.lst 
  ls /media/RoccoBackup/kortemme/WinterRotation2009/consensus_min_orig_min/1A8G_ensemble_1.2/ | egrep "last|low" >> Exp-1A8G-ensemble.lst

- This is how I added paths to each of the pdb files within vim: 
  :1,263s/^/..\/ExperimentalStructs\//g
  :264,2263s/^/\/media\/RoccoBackup\/kortemme\/WinterRotation2009\/consensus_min_orig_min\/1A8G_ensemble\//g
  :2264,4263s/^/\/media\/RoccoBackup\/kortemme\/WinterRotation2009\/consensus_min_orig_min\/1A8G_ensemble_1.2\//g 

- This is how I created the listing for the HIV-RT structures
  ls ../HIV-RT/ExpStructs/ | grep pdb > Exp-1RTH-ensemble.lst
  ls ../HIV-RT/Backrub/1RTH_ensemble | egrep "low|last" | less
  ls ../HIV-RT/Backrub/1RTH_ensemble | egrep "low|last" >> Exp-1RTH-ensemble.lst 
  ls ../HIV-RT/Backrub/1RTH_ensemble_1.2/ | egrep "low|last" >> Exp-1RTH-ensemble.lst

- This is how I added the paths to each of the pdb files within vim:
  :1,103s/^/..\/HIV-RT\/ExpStructs\//g
  :104,1103s/^/..\/HIV-RT\/Backrub\/1RTH_ensemble\//g
  :1104,2103s/^/..\/HIV-RT\/Backrub\/1RTH_ensemble\//g
  :2104,3103s/^/..\/HIV-RT\/Backrub\/1RTH_ensemble_1.2\//g
  :3104,4103s/^/..\/HIV-RT\/Backrub\/1RTH_ensemble_1.2\//g 

- makegraphs.py crashed when I tried to run the HIV-RT set, so instead I created a listing of just those BR samples
  that I'm using for the PCA. Here are the files:
  1RTH_0.6KT_Low_Random100_list.txt
  1RTH_0.6KT_Last_Random100_list.txt
  1RTH_1.2KT_Low_Random100_list.txt
  1RTH_1.2KT_Last_Random100_list.txt

- Now I'm going to concatenate this listing with the experimental structs and rerun makegraphs.py

- This is how I ran the calculations: 
  python makegraphs.py 1A8G.pdb Exp-1A8G-ensemble.lst HIV-PR-All
  python makegraphs.py 1RTH.pdb Exp-1RTH-ensemble-sample.lst HIV-RT-All

- Okay now this is how I display the structures colored by B-Factors in DS Visualizer 2.5:
  1. Load the b-factor pdb file
  2. Go to Display Style -> Hide atoms, show solid-ribbons, color by "Avg. Isotropic Displacement", select 4 bands
  3. Open View -> Data Table
  4. Right-click o the headers and click "Sort", then select "Avg. Isotropic Displacement"
  5. At this point all the residues should be sorted by the b-factor attribute and by the 4-band color previously selected.
     Now simply highlight the different row sections and go back to Display Style and select the color you really want for that group.
  6. Go back to Display Style and set the background color to white if needed.
  7. Done

05/23/11: Changed getRandomFiles.pl to automatically prepend the paths to the files
 Randomly sampled 400 structures from 1A8G backrub 0.6 and 1.2 for both last and low. I did this because we're running into
 memory issues when calling makegraphs.py

 1A8G_0.6_Last_Random100_list.txt
 1A8G_0.6_Low_Random100_list.txt
 1A8G_1.2_Last_Random100_list.txt
 1A8G_1.2_Low_Random100_list.txt

 So now Exp-1A8G-ensemble-sample.lst will have the 263 experimental structures + 400 sampled structures from backrub, 663 total.

05/24/11: When displaying the different color of HIV-PR I identified the residue boundaries by first sorting the residues by
 Avg. Isotropic Displacement in ascending order. Then the boundaries were are the following: 
 198*0.25 = 49.5 ~  50th residue after sort   -> green 0-25%
 198*0.50 =         99th residue after sort   -> yellow 25-50%
 198*0.75 = 148.5 ~ 149th residue after sort  -> orange 50-75%
                                                 red    75-100%

05/25/11: Okay I'm going to change Greg's scripts to calculate the mean C-alpha difference distances "between"
 the experimental and backrub ensembles. If I understand the code correctly makegraphs.py reads in the ensemble.lst 
 and creates a PDBTrajectory object (br_traj). It immediately calculates the average distance difference matrix from 
 these structures alone, as seen in get_diff_dist_matrix_str() in PDBlite.py. Then shortly after within makegraphs.py 
 it uses these average distance difference values and sets them as the bfactors of the input pdb, the bfactor.pdb file 
 is a result of this. I think what I need is something similar to get_diff_dist_matrix_str() but takes 2 trajectories/sets 
 of structures and calculates the differences between the 2 sets, rather than calculating the differences within a single set. 
 
06/12/11: These are the instructions from Tanja: For each of the two example proteins, HIV protease and RT, make two
color-coded structure figures, where you compute mean C-alpha difference distances 
  a) just for the ensemble of experimental structures and 
  b) just for an ensemble of 400 backrub conformations generated from a single input
     structure (one of the ones we show in the submitted manuscript in Fig 4B for
     protease). The 11 structures used in figure 4B were 1A8G.pdb, 1EBY.pdb, 1HXW.pdb, 1IZH.pdb, 1PRO.pdb, 1SBG.pdb, 
     1VIJ.pdb, 1VIK.pdb, 4PHV.pdb,5HVP.pdb and 9HVP.pdb. I am using backrub
     structures generated from 1A8G.pdb so we're good!
For comparison between the two ensembles, we can then show the two color-coded Figures for each protein side-by-side, as in Greg's paper.

I had to change the paths to the files referenced in Exp-1A8G-ensemble.lst
since these paths were specific for my machine in the office. I'll create two
new files Exp-1A8G-xtal.lst and Exp-1A8G-backrub.lst. Exp-1A8G-xtal.lst will
have the paths to the 263 experimentally determined xtal structures.
Exp-1A8G-backrub.lst will have the paths to the 400 randomly sampled backrub
structures generated from 1A8G.pdb. Actually Exp-1A8G-xtal.lst was good-to-go
since it referenced structs in ../ExperimentalStructs/

- This is how I ran the calculations: 
  python makegraphs.py 1A8G.pdb Exp-1A8G-xtal.lst HIV-PR-Xtal
  python makegraphs.py 1A8G.pdb Exp-1A8G-backrub.lst HIV-PR-Backrub

06/12/11: 5:51pm EST
I'm moving stuff back to the jainlab machine due to memory issues here on
albana. Make sure to update the paths of the pdb files in Exp-1A8G-backrub.lst



